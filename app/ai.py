import google.generativeai as genai
import json
from typing import Dict, List
from config import GOOGLE_API_KEY

# Configure Gemini API
genai.configure(api_key=GOOGLE_API_KEY)

def generate_question(topic="Averages", difficulty="medium"):
    """
    Generate a quantitative reasoning MCQ using Gemini API
    """
    try:
        # Create the prompt for Gemini
        prompt = f"""
        Create 1 quantitative reasoning MCQ on the topic "{topic}" for FSC level NAT test.
        
        Please provide the response in the following JSON format:
        {{
            "topic": "{topic}",
            "question_text": "The question here",
            "options": ["Option A", "Option B", "Option C", "Option D"],
            "correct_answer": "The correct option",
            "explanation": "Detailed explanation of the solution"
        }}
        
        Make sure the question is appropriate for {difficulty} difficulty level.
        """
        
        # Generate response using Gemini
        model = genai.GenerativeModel('gemini-pro')
        response = model.generate_content(prompt)
        
        # Parse the response
        response_text = response.text.strip()
        
        # Try to extract JSON from the response
        try:
            # Look for JSON in the response
            start_idx = response_text.find('{')
            end_idx = response_text.rfind('}') + 1
            if start_idx != -1 and end_idx != 0:
                json_str = response_text[start_idx:end_idx]
                question_data = json.loads(json_str)
                return question_data
            else:
                # If no JSON found, return a structured format
                return {
                    "topic": topic,
                    "question_text": response_text,
                    "options": ["Option A", "Option B", "Option C", "Option D"],
                    "correct_answer": "Option A",
                    "explanation": "Generated by AI"
                }
        except json.JSONDecodeError:
            # If JSON parsing fails, return the raw response
            return {
                "topic": topic,
                "question_text": response_text,
                "options": ["Option A", "Option B", "Option C", "Option D"],
                "correct_answer": "Option A",
                "explanation": "Generated by AI"
            }
            
    except Exception as e:
        print(f"Error generating question: {str(e)}")
        return None

def generate_multiple_questions(topic="Averages", count=5, difficulty="medium"):
    """
    Generate multiple questions
    """
    questions = []
    for i in range(count):
        question = generate_question(topic, difficulty)
        if question:
            questions.append(question)
    return questions
